import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  
  String var1 = "text1";
  String var2 = "text1";
  String var3 = "text1";
  
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();

  final _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Login"),
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _nameController,
                validator: (value) {
                  if (value == null) return "Enter name";
                  if (value.contains(RegExp("[0-9]"))) {
                    return "Username cannot have a number";
                  }

                  return null;
                },
                autovalidateMode: AutovalidateMode.onUserInteraction,
                decoration: const InputDecoration(
                  labelText: "Username",
                  hintText: "Name",
                ),
              ),
              TextFormField(
                controller: _emailController,
                validator: (value) {
                  if (value == null) return "Enter name";
                  if (!RegExp(
                          r"^[a-zA-Z0-9.a-zA-Z0-9.!#$%&'*+-/=?^_`{|}~]+@[a-zA-Z0-9]+\.[a-zA-Z]+")
                      .hasMatch(value)) {
                    return "Email not in proper format";
                  }

                  return null;
                },
                autovalidateMode: AutovalidateMode.onUserInteraction,
                decoration: const InputDecoration(
                  labelText: "Email",
                  hintText: "abc@gmail.com",
                ),
              ),
              TextFormField(
                controller: _passwordController,
                validator: (value) {
                  if (value == null) return "Enter name";
                  if (value.length < 6) {
                    return "Password should be more than 6 chars";
                  }

                  return null;
                },
                autovalidateMode: AutovalidateMode.onUserInteraction,
                obscureText: true,
                decoration: const InputDecoration(
                  labelText: "Password",
                  hintText: "********",
                ),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (!_formKey.currentState!.validate()) return;

                },
                child: GestureDetector(
                 onTap: () {
                  setState(() {
                  var1 = _nameController.text;
                  var2 = _emailController.text;
                  var3 = _passwordController.text;
                }); 
                _showGestureType(context, "Successful Login! \n\n User details are: \n\n Username: $var1 \n Email: $var2 \n Password: $var3");
                   
                 
          },
                child: Container(
                child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Text('Login', style: TextStyle(color: Colors.white),),
              ),
                  decoration: BoxDecoration(
              color: Colors.blue,
                  borderRadius: BorderRadius.all(Radius.circular(5))
          ),
          ),
        ),
                
                 
                
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  Future _showGestureType(BuildContext context, String gestureType) {
   
    return showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(gestureType),
          actions: [
            ElevatedButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: 
            
              const Text("Ok"),
            ),
          ],
        );
      },
    );
  }
}

